package com.custodix.insite.local.ehr2edc.jackson.mixin.projector;

import com.custodix.insite.local.ehr2edc.query.executor.common.projector.*;
import com.custodix.insite.local.ehr2edc.query.executor.common.projector.formitem.ProjectedValueToFormItem;
import com.custodix.insite.local.ehr2edc.query.executor.common.projector.measurement.*;
import com.custodix.insite.local.ehr2edc.query.executor.common.projector.measurementnew.*;
import com.custodix.insite.local.ehr2edc.query.executor.common.projector.number.FormatNumber;
import com.custodix.insite.local.ehr2edc.query.executor.demographic.projector.birthdate.*;
import com.custodix.insite.local.ehr2edc.query.executor.demographic.projector.deathdate.DateOfDeathProjector;
import com.custodix.insite.local.ehr2edc.query.executor.demographic.projector.deathdate.DateOfDeathToDateProjector;
import com.custodix.insite.local.ehr2edc.query.executor.demographic.projector.gender.GenderProjector;
import com.custodix.insite.local.ehr2edc.query.executor.demographic.projector.gender.GenderToSDTMCodeProjector;
import com.custodix.insite.local.ehr2edc.query.executor.demographic.projector.gender.GenderToStringProjector;
import com.custodix.insite.local.ehr2edc.query.executor.demographic.projector.vitalstatus.VitalStatusProjector;
import com.custodix.insite.local.ehr2edc.query.executor.demographic.projector.vitalstatus.VitalStatusToDeceasedBooleanProjector;
import com.custodix.insite.local.ehr2edc.query.executor.laboratory.projector.*;
import com.custodix.insite.local.ehr2edc.query.executor.laboratory.projector.concept.*;
import com.custodix.insite.local.ehr2edc.query.executor.laboratory.projector.interpretation.InterpretationToIsPositiveBooleanProjector;
import com.custodix.insite.local.ehr2edc.query.executor.laboratory.projector.interpretation.InterpretationToOriginalProjector;
import com.custodix.insite.local.ehr2edc.query.executor.laboratory.projector.interpretation.LabValueToInterpretationProjector;
import com.custodix.insite.local.ehr2edc.query.executor.medication.projector.*;
import com.custodix.insite.local.ehr2edc.query.executor.vitalsign.projector.*;
import com.custodix.insite.local.ehr2edc.query.executor.vitalsign.projector.concept.*;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME,
			  include = JsonTypeInfo.As.PROPERTY,
			  property = "type")
@JsonSubTypes({ @JsonSubTypes.Type(value = DateTimeISO8601Projector.class,
								   name = "dateTimeISO8601"),
				@JsonSubTypes.Type(value = DateToStringProjector.class,
								   name = "dateToString"),
				@JsonSubTypes.Type(value = MapToBooleanProjector.class,
								   name = "mapToBoolean"),
				@JsonSubTypes.Type(value = MapToStringProjector.class,
								   name = "mapToString"),
				@JsonSubTypes.Type(value = MapToLabeledValue.class,
								   name = "mapToLabeledValue"),
				@JsonSubTypes.Type(value = DoNotOutputBooleanIfFalse.class,
								   name = "doNotOutputBooleanIfFalse"),
				@JsonSubTypes.Type(value = BooleanToNYProjector.class,
								   name = "booleanToNY"),
				@JsonSubTypes.Type(value = BooleanToIntegerProjector.class,
								   name = "booleanToInteger"),
				@JsonSubTypes.Type(value = NegateBoolean.class,
								   name = "negateBoolean"),
				@JsonSubTypes.Type(value = RoundingProjector.class,
								   name = "round"),
				@JsonSubTypes.Type(value = GenderProjector.class,
								   name = "gender"),
				@JsonSubTypes.Type(value = GenderToSDTMCodeProjector.class,
								   name = "genderToSDTMCode"),
				@JsonSubTypes.Type(value = GenderToStringProjector.class,
								   name = "genderToString"),
				@JsonSubTypes.Type(value = DateOfBirthProjector.class,
								   name = "dateOfBirth"),
				@JsonSubTypes.Type(value = DateOfBirthToDateProjector.class,
								   name = "dateOfBirthToDate"),
				@JsonSubTypes.Type(value = DateOfBirthToAgeProjector.class,
								   name = "dateOfBirthToAge"),
				@JsonSubTypes.Type(value = AgeToNumericalProjector.class,
								   name = "ageToNumerical"),
				@JsonSubTypes.Type(value = AgeToUnitProjector.class,
								   name = "ageToUnit"),
				@JsonSubTypes.Type(value = DateOfDeathProjector.class,
								   name = "dateOfDeath"),
				@JsonSubTypes.Type(value = DateOfDeathToDateProjector.class,
								   name = "dateOfDeathToDate"),
				@JsonSubTypes.Type(value = VitalStatusProjector.class,
								   name = "vitalStatus"),
				@JsonSubTypes.Type(value = VitalStatusToDeceasedBooleanProjector.class,
								   name = "vitalStatusToDeceasedBoolean"),
				@JsonSubTypes.Type(value = LastLabValueProjector.class,
								   name = "lastLabValue"),
				@JsonSubTypes.Type(value = LabValueToLabConceptProjector.class,
								   name = "labValueToLabConcept"),
				@JsonSubTypes.Type(value = LabConceptToCodeProjector.class,
								   name = "labConceptToCode"),
				@JsonSubTypes.Type(value = LabConceptToComponentProjector.class,
								   name = "labConceptToComponent"),
				@JsonSubTypes.Type(value = LabConceptToFastingBooleanProjector.class,
								   name = "labConceptToFastingBoolean"),
				@JsonSubTypes.Type(value = LabConceptToMethodProjector.class,
								   name = "labConceptToMethod"),
				@JsonSubTypes.Type(value = LabConceptToSpecimenProjector.class,
								   name = "labConceptToSpecimen"),
				@JsonSubTypes.Type(value = LabValueToMeasurementProjector.class,
								   name = "labValueToMeasurement"),
				@JsonSubTypes.Type(value = LabValueToProjectedValue.class,
								   name = "labValueToProjectedValue"),
				@JsonSubTypes.Type(value = ProjectLabValue.class,
								   name = "projectLabValue"),
				@JsonSubTypes.Type(value = ProjectMedication.class,
								   name = "projectMedication"),
				@JsonSubTypes.Type(value = MeasurementToValueProjector.class,
								   name = "measurementToValue"),
				@JsonSubTypes.Type(value = GetMeasurementValueAndUnit.class,
								   name = "measurementToValueAndUnit"),
				@JsonSubTypes.Type(value = MeasurementToValueInUnit.class,
								   name = "measurementToValueInUnit"),
				@JsonSubTypes.Type(value = ComposeProjectedValueProjection.class,
								   name = "composeProjectedValueProjection"),
				@JsonSubTypes.Type(value = ConvertProjectedValue.class,
								   name = "convertProjectedValue"),
				@JsonSubTypes.Type(value = ConvertProjectedValue.class,
								   name = "convertValue"),
				@JsonSubTypes.Type(value = ConvertProjectedValueComposite.class,
								   name = "convertProjectedValueComposite"),
				@JsonSubTypes.Type(value = ConvertProjectedValueComposite.class,
								   name = "composeByCode"),
				@JsonSubTypes.Type(value = SetProjectedValueUnit.class,
								   name = "setProjectedValueUnit"),
				@JsonSubTypes.Type(value = SetProjectedValueUnit.class,
								   name = "setUnit"),
				@JsonSubTypes.Type(value = FormatProjectedValueNumber.class,
								   name = "formatProjectedValueNumber"),
				@JsonSubTypes.Type(value = FormatProjectedValueNumber.class,
								   name = "formatNumberValue"),
				@JsonSubTypes.Type(value = MapProjectedValue.class,
								   name = "map"),
				@JsonSubTypes.Type(value = MapProjectedValue.class,
								   name = "mapProjectedValue"),
				@JsonSubTypes.Type(value = MapProjectedValue.class,
								   name = "mapMeasurement"),
				@JsonSubTypes.Type(value = MeasurementToLowerLimitProjector.class,
								   name = "measurementToLowerLimit"),
				@JsonSubTypes.Type(value = MeasurementToUpperLimitProjector.class,
								   name = "measurementToUpperLimit"),
				@JsonSubTypes.Type(value = MeasurementToUnitProjector.class,
								   name = "measurementToUnit"),
				@JsonSubTypes.Type(value = SubjectIdProjector.class,
								   name = "subjectId"),
				@JsonSubTypes.Type(value = GetConsentDate.class,
								   name = "getConsentDate"),
				@JsonSubTypes.Type(value = LabValueToInterpretationProjector.class,
								   name = "labValueToInterpretation"),
				@JsonSubTypes.Type(value = InterpretationToIsPositiveBooleanProjector.class,
								   name = "interpretationToIsPositiveBoolean"),
				@JsonSubTypes.Type(value = InterpretationToOriginalProjector.class,
								   name = "interpretationToOriginal"),
				@JsonSubTypes.Type(value = LabValueToStartDateProjector.class,
								   name = "labValueToStartDate"),
				@JsonSubTypes.Type(value = LabValueToEndDateProjector.class,
								   name = "labValueToEndDate"),
				@JsonSubTypes.Type(value = LabValueToVendorProjector.class,
								   name = "labValueToVendor"),
				@JsonSubTypes.Type(value = IsVitalSignAvailable.class,
								   name = "isVitalSignAvailable"),
				@JsonSubTypes.Type(value = LastVitalSignProjector.class,
								   name = "lastVitalSign"),
				@JsonSubTypes.Type(value = VitalSignToVitalSignConceptProjector.class,
								   name = "vitalSignToVitalSignConcept"),
				@JsonSubTypes.Type(value = VitalSignConceptToCodeProjector.class,
								   name = "vitalSignConceptToCode"),
				@JsonSubTypes.Type(value = VitalSignConceptToPositionProjector.class,
								   name = "vitalSignConceptToPosition"),
				@JsonSubTypes.Type(value = VitalSignConceptToLocationProjector.class,
								   name = "vitalSignConceptToLocation"),
				@JsonSubTypes.Type(value = VitalSignConceptToLateralityProjector.class,
								   name = "vitalSignConceptToLaterality"),
				@JsonSubTypes.Type(value = VitalSignToMeasurementProjector.class,
								   name = "vitalSignToMeasurement"),
				@JsonSubTypes.Type(value = VitalSignToProjectedValue.class,
								   name = "vitalSignToProjectedValue"),
				@JsonSubTypes.Type(value = ProjectVitalSignValue.class,
								   name = "projectVitalSignValue"),
				@JsonSubTypes.Type(value = VitalSignToDateProjector.class,
								   name = "vitalSignToDate"),
				@JsonSubTypes.Type(value = LastMedicationProjector.class,
								   name = "lastMedication"),
				@JsonSubTypes.Type(value = MedicationToStartDateProjector.class,
								   name = "medicationToStartDate"),
				@JsonSubTypes.Type(value = MedicationToEndDateProjector.class,
								   name = "medicationToEndDate"),
				@JsonSubTypes.Type(value = MedicationToNameProjector.class,
								   name = "medicationToName"),
				@JsonSubTypes.Type(value = ExtractDosageFromMedication.class,
								   name = "extractDosageFromMedication"),
				@JsonSubTypes.Type(value = ExtractUnitFromDosage.class,
								   name = "extractUnitFromDosage"),
				@JsonSubTypes.Type(value = ExtractValueFromDosage.class,
								   name = "extractValueFromDosage"),
				@JsonSubTypes.Type(value = MedicationToAdministrationRoute.class,
								   name = "medicationToAdministrationRoute"),
				@JsonSubTypes.Type(value = MedicationToDoseForm.class,
								   name = "medicationToDoseForm"),
				@JsonSubTypes.Type(value = MedicationToDosingFrequency.class,
								   name = "medicationToDosingFrequency"),
				@JsonSubTypes.Type(value = FormatNumber.class,
								   name = "formatNumber"),
				@JsonSubTypes.Type(value = ProjectedValueToFormItem.class,
								   name = "projectedValueToFormItem"),
				@JsonSubTypes.Type(value = ProjectedValueToFormItem.class,
								   name = "toFormItem"),
				@JsonSubTypes.Type(value = MapUnitToCommonModel.class,
								   name = "unitToCommonModel"),
				@JsonSubTypes.Type(value = FixedStringProjector.class,
								   name = "fixedString")
			  })
public abstract class ProjectorMixin {
}
